import tkinter as tk
from tkinter import filedialog
import threading
from scapy.layers import http
from scapy.all import sniff, IP
import argparse
import time
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import socket

class NetworkTrafficAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1000x700")
        self.root.title('Network Traffic Analyzer')

        self.label = tk.Label(root, text='Network Traffic Analysis', font=('Arial', 18, 'bold'))
        self.label.pack(pady=10)

        self.text_area = tk.Text(root, width=100, height=10)
        self.text_area.pack()

        self.save_button = tk.Button(root, text='Save', command=self.save_file)
        self.save_button.pack(pady=5)

        self.save_graph_button = tk.Button(root, text='Save Graph', command=self.save_graph)
        self.save_graph_button.pack(pady=5)

        self.exit_button = tk.Button(root, text='Exit', command=self.root.destroy)
        self.exit_button.pack(pady=5)

        self.G = nx.DiGraph()
        self.http_nodes = set()  # HTTP trafiÄŸine sahip IP adreslerini saklar
        self.my_ip = self.get_my_ip()

        self.figure, self.ax = plt.subplots(figsize=(8, 6))
        self.canvas = FigureCanvasTkAgg(self.figure, master=root)
        self.canvas.get_tk_widget().pack(pady=20)

        self.listen_thread = threading.Thread(target=self.listen_traffic)
        self.listen_thread.daemon = True
        self.listen_thread.start()

    def get_my_ip(self):
        hostname = socket.gethostname()
        return socket.gethostbyname(hostname)

    def save_file(self):
        content = self.text_area.get("1.0", tk.END)
        threading.Thread(target=self.save_file_thread, args=(content,)).start()

    def save_file_thread(self, content):
        file = filedialog.asksaveasfile(filetypes=[('text file', '*.txt')], defaultextension='.txt', title='Save captured data')
        if file:
            file.write(content)
            file.close()

    def save_graph(self):
        file = filedialog.asksaveasfile(filetypes=[('PNG files', '*.png')], defaultextension='.png', title='Save Graph')
        if file:
            self.figure.savefig(file.name)

    def get_interface(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-i", "--interface", dest="interface", help="specify the interface")
        arguments = parser.parse_args()
        return arguments.interface

    def listen_traffic(self):
        iface = self.get_interface()
        sniff(iface=iface, store=False, prn=self.process_packet)

    def process_packet(self, packet):
        if IP in packet:
            src_ip = packet[IP].src
            dst_ip = packet[IP].dst

            if packet.haslayer(http.HTTPRequest):
                url = packet[http.HTTPRequest].Host.decode("utf-8")
                path = packet[http.HTTPRequest].Path.decode("utf-8")
                method = packet[http.HTTPRequest].Method.decode("utf-8")
                request_info = f"Method: {method} URL: {url}{path}"
                self.http_nodes.add(src_ip)
                self.http_nodes.add(dst_ip)
            else:
                request_info = ""

            timestamp = packet.time
            time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(timestamp))

            output = f"Time: {time_str} Source IP: {src_ip}  Destination IP: {dst_ip}  {request_info}\n"
            self.text_area.insert(tk.END, output)
            self.text_area.see(tk.END)

            self.G.add_edge(src_ip, dst_ip)
            self.plot_graph()

    def plot_graph(self):
        self.ax.clear()
        pos = nx.shell_layout(self.G)  

        node_color = ['green' if node == self.my_ip else 'red' if node in self.http_nodes else 'lightblue' for node in self.G.nodes()]
        
        node_style = {'node_color': node_color, 'node_shape': 'o', 'node_size': 1000, 'edgecolors': 'k'}
        edge_style = {'edge_color': 'gray', 'arrowsize': 20, 'arrowstyle': '-|>'}

        nx.draw_networkx_nodes(self.G, pos, ax=self.ax, **node_style)
        nx.draw_networkx_edges(self.G, pos, ax=self.ax, **edge_style)
        nx.draw_networkx_labels(self.G, pos, ax=self.ax, font_size=10, font_color='black')

        self.ax.set_title("Network Traffic Visualization")
        self.ax.axis('off')
        self.canvas.draw()

    def start(self):
        self.root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = NetworkTrafficAnalyzer(root)
    app.start()
